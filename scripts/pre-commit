
#!/bin/sh

# Check for force commit flag
FORCE_COMMIT=${FORCE_COMMIT:-0}

# If not a force commit, run normal checks
if [ "$FORCE_COMMIT" -eq 0 ]; then
    echo "***** Optimizing imports with Spotless *****"
    ./gradlew spotlessApply
    spotless_status=$?

    if [ "$spotless_status" -ne 0 ]; then
        echo "‚ùå Failed to optimize imports. Fix the issues manually before committing."
        exit 1
    fi

    echo "***** Running unit tests *****"

    # Stash uncommitted changes
    stash_commit="$(git stash create)"
    git stash push -u -k -m "pre-commit-temp"

    # Run unit tests
    ./gradlew test
    status=$?

    # Re-apply stashed changes if any
    if [ -n "${stash_commit}" ]; then
        git stash apply "${stash_commit}"
    fi

    echo "***** Running static code checks *****"

    # Java source files to scan
    FILES=$(find ./src -name "*.java")

    # Initialize fail flag
    fail=0

    # Check for common issues
    for file in $FILES; do
        ##################################
        # Rule 1: Unused Imports (now handled by Spotless)
        ##################################
        
        ##################################
        # Rule 2: Import Order
        ##################################
        imports=$(grep '^import ' "$file")
        sorted=$(echo "$imports" | sort)
        if [ "$imports" != "$sorted" ]; then
            echo "‚ö†Ô∏è  [Import Order] $file: import statements not sorted."
            fail=1
        fi

        ##################################
        # Rule 3: Circular Imports
        ##################################
        base=$(basename "$file" .java)
        if grep -q "import.*$base" "$file"; then
            echo "‚ö†Ô∏è  [Circular Import] $file: imports itself."
            fail=1
        fi

        ##################################
        # Rule 4: Indentation - Spaces Instead of Tabs
        ##################################
        grep -nP "^( {2,})" "$file" | while read -r line; do
            echo "‚ö†Ô∏è  [Indentation] $file Line ${line%%:*}: Uses spaces instead of tabs."
            fail=1
        done

        ##################################
        # Rule 5: Unused Functions (with Spring Framework exceptions)
        ##################################
        # Skip unused function check for Spring configuration classes and exception classes
        if ! echo "$file" | grep -qE '(Configuration|Exception)\.java$'; then
            functions=$(grep -Po 'public\s+[^\s]+\s+\K\w+(?=\s*\()' "$file")
            for func in $functions; do
                # Skip checking @Bean methods, they're used by Spring
                is_bean=$(grep -B 5 -A 1 "$func" "$file" | grep -E "@Bean|@Component|@Repository|@Service|@Controller|@RestController|@Configuration")
                
                # Skip getter/setter methods
                is_getter_setter=$(echo "$func" | grep -E "^(get|set|is)[A-Z]")
                
                if [ -z "$is_bean" ] && [ -z "$is_getter_setter" ]; then
                    count=$(grep -c "$func(" "$file")
                    if [ "$count" -le 1 ]; then
                        echo "‚ö†Ô∏è  [Unused Function] $file: function $func may be unused."
                        fail=1
                    fi
                fi
            done
        fi

        ##################################
        # Rule 6: Trailing Whitespace
        ##################################
        if grep -q '[[:blank:]]$' "$file"; then
            echo "‚ö†Ô∏è  [Trailing Whitespace] $file: contains trailing whitespace."
            fail=1
        fi
    done

    echo "***** Done with static code checks *****"

    if [ "$status" -ne 0 ] || [ "$fail" -ne 0 ]; then
        echo "‚ùå Pre-commit checks failed."
        exit 1
    fi

    echo "‚úÖ Pre-commit checks passed!"
    exit 0
else
    # Force commit: skip all checks
    echo "üö® FORCE COMMIT: Skipping all pre-commit checks!"
    exit 0
fi
